[General]
network = Scenario
description = Scenario without attacker
sim-time-limit = 60.5s

*.normal_car[*].ipv4.arp.typename = "Arp"		# non ci interessa il funzionamento di ARP: ipotizziamo che le ARP table siano gi√† complete

*.normal_car[1].numApps = 1
*.normal_car[1].app[0].typename = "UdpBasicApp"
*.normal_car[1].app[0].destAddresses = "normal_car[4]"
*.normal_car[1].app[0].localPort = 5000
*.normal_car[1].app[0].destPort = 5000
*.normal_car[1].app[0].messageLength = 1024B
*.normal_car[1].app[0].sendInterval = 1s
*.normal_car[1].app[0].startTime = 20s
*.normal_car[1].app[0].packetName = "UDPData"

*.normal_car[*].numApps = 1
*.normal_car[*].app[0].typename = "UdpSink"
*.normal_car[*].app[0].localPort = 5000
*.normal_car[*].routing.deletePeriod = 5s

# AckingWirelessInterface
*.*_car[*].wlan[*].typename = "AckingWirelessInterface"
*.*_car[*].wlan[*].bitrate = 2Mbps
*.*_car[*].wlan[*].mac.headerLength = 23B
*.*_car[*].wlan[*].radio.typename = "UnitDiskRadio"
*.*_car[*].wlan[*].radio.transmitter.headerLength = 96b
*.*_car[*].wlan[*].radio.transmitter.communicationRange = 120m
*.*_car[*].wlan[*].radio.transmitter.interferenceRange = 0m
*.*_car[*].wlan[*].radio.transmitter.detectionRange = 0m
*.*_car[*].wlan[*].radio.receiver.ignoreInterference = true

# HostAutoConfigurator
*.*_car[*].ipv4.configurator.typename = "HostAutoConfigurator"
*.*_car[*].ipv4.configurator.interfaces = "wlan0"
*.*_car[*].ipv4.configurator.mcastGroups = "224.0.0.1"

# VeinsInetMobility
*.*_car[*].mobility.typename = "VeinsInetMobility"

# VeinsInetManager
*.manager.updateInterval = 0.1s
*.manager.launchConfig = xmldoc("arcavacatamap.launchd.xml")
*.manager.moduleType = "normal_car=networkprojectvanet.veins_inet.AodvCar *=networkprojectvanet.veins_inet.AodvCar"
*.manager.moduleDisplayString = "normal_car='i=veins/node/car;is=vs' *='i=veins/node/car;is=vs'"
*.manager.moduleName = "normal_car=normal_car *=normal_car"

# Energy consumption
*.*_car[*].wlan[0].radio.energyConsumer.typename = "StateBasedEpEnergyConsumer"
*.*_car[*].wlan[0].radio.energyConsumer.offPowerConsumption = 0mW
*.*_car[*].wlan[0].radio.energyConsumer.sleepPowerConsumption = 1mW
*.*_car[*].wlan[0].radio.energyConsumer.switchingPowerConsumption = 1mW
*.*_car[*].wlan[0].radio.energyConsumer.receiverIdlePowerConsumption = 2mW
*.*_car[*].wlan[0].radio.energyConsumer.receiverBusyPowerConsumption = 5mW
*.*_car[*].wlan[0].radio.energyConsumer.receiverReceivingPowerConsumption = 10mW
*.*_car[*].wlan[0].radio.energyConsumer.transmitterIdlePowerConsumption = 2mW
*.*_car[*].wlan[0].radio.energyConsumer.transmitterTransmittingPowerConsumption = 100mW

*.*_car[*].energyStorage.typename = "IdealEpEnergyStorage"

# Misc
**.vector-recording = true

*.*_car[*].wlan[0].radio.displayCommunicationRange = true
*.visualizer.networkRouteVisualizer.displayRoutes = true

#-----------------------------------------------------------------------------
[Config ArpPoisoningAttackScenario]
description = Scenario with ARP poisoning attack

*.manager.moduleDisplayString = "normal_car='i=veins/node/car;is=vs' *='i=veins/node/car,red;is=vs'"
*.manager.moduleName = "normal_car=normal_car *=attacker_car"

*.attacker_car[*].ipv4.arp.typename = "networkprojectvanet.mitm.arp_poisoning_attack.ArpPoisoning"

*.attacker_car[*].numApps = 1
*.attacker_car[*].app[0].typename = "UdpSink"
*.attacker_car[*].app[0].localPort = 5000
*.attacker_car[*].routing.deletePeriod = 5s

*.attacker_car[*].ipv4.arp.victim1 = "normal_car[1]"
*.attacker_car[*].ipv4.arp.victim2 = "normal_car[4]"

#-----------------------------------------------------------------------------
[Config ArpPoisoningMitigationRSAScenario]
description = Scenario with ARP poisoning mitigation with RSA
extends = ArpPoisoningAttackScenario

*.manager.moduleDisplayString = "normal_car='i=veins/node/car,green;is=vs' *='i=veins/node/car,red;is=vs'"
*.normal_car[*].ipv4.arp.typename = "networkprojectvanet.mitm.arp_poisoning_mitigation.SecureArp"
*.normal_car[*].ipv4.arp.cryptoType = "RSA"

#-----------------------------------------------------------------------------
[Config ArpPoisoningMitigationECDSAScenario]
description = Scenario with ARP poisoning mitigation with ECDSA
extends = ArpPoisoningAttackScenario

*.manager.moduleDisplayString = "normal_car='i=veins/node/car,green;is=vs' *='i=veins/node/car,red;is=vs'"
*.normal_car[*].ipv4.arp.typename = "networkprojectvanet.mitm.arp_poisoning_mitigation.SecureArp"
*.normal_car[*].ipv4.arp.cryptoType = "ECDSA"

